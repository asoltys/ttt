@model TransformationTimelineTool.ViewModels.EventViewModel

@{
    ViewBag.Title = "Edit";
    var currentUser = HttpContext.Current.User;
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="">
        <h4>@Resources.Activity</h4>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Event.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Event.InitiativeID, Resources.Initiative, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Event.InitiativeID, Model.InitiativeSelect)
                @Html.ValidationMessageFor(model => model.Event.InitiativeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edit.Type, Resources.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Edit.Type, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Edit.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edit.DisplayDate, Resources.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Edit.DisplayDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Edit.DisplayDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2 text-right"><strong>@Resources.Branches</strong></div>
            <div class="col-md-offset-2 col-md-10">
                <table>
                    <tr>
                        @{
                            int cnt = 0;
                            List<TransformationTimelineTool.ViewModels.BranchesData> branches = ViewBag.Branches;

                            foreach (var branch in branches)
                            {
                                if(cnt++ % 3 == 0)
                                {
                                    @:</tr><tr>
                                }
                                @:<td>
                                    <input type="checkbox"
                                           name="selectedBranches"
                                           value="@branch.ID"
                                           @(Html.Raw(branch.Flag ? "checked=\"checked\"" : "")) />
                                        @branch.Name
                                @:</td>
                            }
                        }
                    </tr>
                    <tr>
                        <td>
                            <input type="checkbox"
                                   name="selectAllBranches"
                                  id="selectAllBranches"
                                   value="allBranches" />
                            @Resources.Deselect/@Resources.SelectAll
                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2 text-right"><strong>@Resources.Regions</strong></div>
            <div class="col-md-offset-2 col-md-10">
               <table>
                   <tr>
                       @{ 
                           int cnt2 = 0;
                           List<TransformationTimelineTool.ViewModels.RegionsData> regions = ViewBag.Regions;

                           foreach(var region in regions)
                           {
                               if(cnt2++ % 3 == 0)
                               {
                                   @:</tr><tr>
                               }
                               @:<td>
                                    <input type="checkbox"
                                           name="selectedRegions"
                                           value="@region.ID"
                                           @(Html.Raw(region.Flag ? "checked=\"checked\"" : "")) />
                                           @region.Name
                               @:</td>
                           }
                       }
                   </tr>
                   <tr>
                       <td>
                           <input type="checkbox"
                                  name="selectAllRegions"
                                  id="selectAllRegions"
                                  value="allRegions" />
                           @Resources.Deselect/@Resources.SelectAll
                       </td>
                   </tr>
               </table>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edit.HoverE, Resources.HoverDescEng, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Edit.HoverE, new { @class = "form-control", @cols= "50", @rows="5" })
                @Html.ValidationMessageFor(model => model.Edit.HoverE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edit.HoverF, Resources.HoverDescFra, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Edit.HoverF, new { @class = "form-control", @cols = "50", @rows = "5" })
                @Html.ValidationMessageFor(model => model.Edit.HoverF, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edit.TextE, Resources.ActivityDetailedDescEng, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Edit.TextE, new { @class = "form-control ckeditor" } )
                @Html.ValidationMessageFor(model => model.Edit.TextE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edit.TextF, Resources.ActivityDetailedDescFra, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Edit.TextF, new { @class = "form-control ckeditor" })
                @Html.ValidationMessageFor(model => model.Edit.TextF, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">@Resources.LastUpdated</label>
            <div class="col-md-10">
               @Html.DisplayFor(model => model.Edit.Date)
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">@Resources.LastEditedBy</label>
            <div class="col-md-10">
                @Html.ActionLink(Model.Edit.Editor.UserName, "Details", "Users", new { ID = Model.Edit.EditorID }, null)
            </div>
        </div>
       
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.Event.Status,Resources.Status,htmlAttributes: new { @class = "control-label col-md-2" })
                @if (currentUser.IsInRole("Admin") || currentUser.IsInRole("OPI"))
                {
                    @Html.EnumDropDownListFor(model => model.Event.Status, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Event.Status, "", new { @class = "text-danger" })
                }
                else
                {
                    @Html.LabelFor(model => model.Event.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.RadioButtonFor(model => model.Event.Status, TransformationTimelineTool.Models.Status.Draft) @:Draft
                    @Html.RadioButtonFor(model => model.Event.Status, TransformationTimelineTool.Models.Status.Pending) @:Pending
                }
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Resources.Submit" class="btn btn-default" /> |

                @Html.ActionLink(Resources.BackToList, "Index")
            </div>
        </div>
    </div>
}

<div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/ckeditor/ckeditor.js" type="text/javascript"></script>
    <script src="~/Scripts/toggleRegionsBranches.js" type="text/javascript"></script>
    <script src="~/Scripts/front-end-custom-validation.js" type="text/javascript"></script>
}
