@{
    if (Culture == "fr")
    {
        Layout = "~/Views/Shared/_IntraLayoutFra.cshtml";
        ViewBag.lang = "fra";
    }
    else
    {
        Layout = "~/Views/Shared/_IntraLayout.cshtml";
        ViewBag.lang = "eng";
    }
    ViewBag.Title = @Resources.NationalTransformationTimelineTool;
}
<link href="@Url.Content("~/Content/accessibility.css")" rel="stylesheet" type="text/css" />

<div class="grid-12">
    <div id="tool-introduction" class="span-12">
        @Html.Raw(Resources.TimelineIntroduction)
    </div>

    <div id="controller-container" class="span-12">
        <form>
            <div class="span-12 margin-bottom-none">
                <label class="form-label-inline font-large">@Resources.ReportSelectTimeline</label>
                <select name="select-timeline" id="select-timeline" data-controller-name='@Resources.Timeline'>
                    <option value="0"></option>
                    <option value="All">@Resources.SelectAll</option>
                </select>
            </div>
            <div class="span-12 margin-bottom-none">
                <label class="form-label-inline font-large">@Resources.SelectYourArea</label>
                <select name="select-region" id="select-region" data-controller-name='@Resources.Region' disabled="true">
                    <option value="0">@Resources.SelectAll</option>
                </select>
            </div>
            <div class="span-12">
                <label class="form-label-inline font-large">@Resources.SelectYourBranch</label>
                <select name="select-branch" id="select-branch" data-controller-name='@Resources.Branch' disabled="true">
                    <option value="0">@Resources.SelectAll</option>
                </select>
            </div>
        </form>
    </div>
</div>

<div id="text-timeline-container" class="grid-12 margin-left-large margin-right-large">
    <div id="timeline-accordions" class="accordion"></div>
</div>

<script type="text/javascript" src="/Scripts/moment-with-locales.min.js"></script>
<script>
var callPostAPI = function (url, successCallback, jsonData) {
    if (arguments.length == 2) 
        return $.ajax({
            type: "POST",
            url: url,
            cache: false,
            success: function (data) {
                successCallback(JSON.stringify(data));
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(JSON.stringify(jqXHR) + ", " + textStatus);
            }
        });
    else 
        return $.ajax({
            type: "POST",
            contentType: "application/json",
            url: url,
            cache: false,
            data: JSON.stringify(jsonData),
            success: function (data) {
                successCallback(JSON.stringify(data));
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(JSON.stringify(jqXHR) + ", " + textStatus);
            }
        });
}

var sortComparator = function (a, b) {
    if (a > b) return 1;
    if (a < b) return -1;
    return 0;
}

var getQuarterData = function (month, year) {
    if (month >= 1 && month <= 3) return [4,year-1];
    if (month >= 4 && month <= 6) return [1,year];
    if (month >= 7 && month <= 9) return [2,year];
    if (month >= 10 && month <= 12) return [3,year];
    return [0,0];
}

var getQuarter = function (month, year) {
    if (month >= 1 && month <= 3) return 'Q4 ' + (year-1);
    if (month >= 4 && month <= 6) return 'Q1 ' + year;
    if (month >= 7 && month <= 9) return 'Q2 ' + year;
    if (month >= 10 && month <= 12) return 'Q3 ' + year;
    return 'error';
}

function toggleAccordion(elem) {
    elem.toggleClass('toggle');
    var contentID = elem.attr("href");
    $(contentID).slideToggle();
}

var culture = window.location.href.indexOf('lang=fra') > -1 ? 'fr-ca':'en-ca';
var cultureDataAppend = culture == 'en-ca' ? 'E' : 'F';
moment.locale(culture);
var apiReturnDateFormat = 'MM/DD/YYYY';

// ----------------------------------------------------------------------------

var gui = (function () {
    var _accordionCount = 0;

    var _addHeading = function(title) {
        var heading = "<h2>";
        heading += title;
        heading += "</h2>";
        $('#timeline-accordions').append(heading);
    }

    var _addAccordion = function (title, content, weight) {
        weight = weight !== undefined ? weight : -1;
        _accordionCount++;
        var accordion = "<div class='accordion-section' data-weight=" + weight + ">";
        accordion += "<a class='accordion-section-title' href='#accordion-" + _accordionCount + "'><span></span>&nbsp;" + title + "</a>";
        accordion += "<div id='accordion-" + _accordionCount + "' class='accordion-section-content closed'>";
        accordion += content;
        accordion += "</div></div>";
        $("#timeline-accordions").append(accordion);
    }

    var _render = function(data) {
        $("#timeline-accordions").empty();
        data.forEach(function(block) {
            _addHeading(block['Name' + cultureDataAppend]);
            block.Data.forEach(function(initiative, idx, arr) {
                var content = _createContent(initiative);
                var initiativeName = initiative['Name' + cultureDataAppend];
                if (initiative.Weight === undefined) {
                    _addAccordion(initiativeName, content);
                } else {
                    _addAccordion(initiativeName, content, initiative.Weight);
                }
            });
        });
    }

    var _getImpactResourceByWeight = function (weight) {
        switch (weight) {
            case 0: return '@Resources.TimelineNoImpact';
            case 1: return '@Resources.TimelineLowImpact';
            case 2: return '@Resources.TimelineMediumImpact';
            case 3: return '@Resources.TimelineHighImpact';
            case 4: return '@Resources.BP2020';
        }
    }

    var _categorize = function () {
        if (!(controller.regionKey() == 0 || controller.branchKey() == 0)) {
            var $accordions = $(".accordion-section");
            var previousWeight;
            $.each($accordions, function () {
                var weight = $(this).data('weight');
                if (weight == previousWeight)
                    return true; // skip to next iteration
                if (weight != 4) {
                    $("<h4>" + _getImpactResourceByWeight(weight) + "</h4>").insertBefore($(this));
                    previousWeight = weight;
                } else {
                    return true;
                }
            });
        }
    }

    var _createContent = function (initiative) {
        var content = [];
        var heading = ["Description", "Timespan", "Key milestones", "Training"];

        // Create description
        var description = "<p>" + initiative['Description' + cultureDataAppend] + "</p>";

        // Create timespan
        var startDate = moment(initiative.StartDate, apiReturnDateFormat);
        startDate = getQuarter(startDate.month()+1, startDate.year());
        var endDate = moment(initiative.EndDate, apiReturnDateFormat);
        endDate = getQuarter(endDate.month()+1, endDate.year());
        var timespan = startDate + " ~ " + endDate;
        timespan = "<p>" + timespan + "</p>";

        // Create milestones & training
        var milestones = "<ul>";
        var training = "<ul>";
        var events = initiative["Events"];
        var milstoneCount = 0;
        var trainingCount = 0;
        if (events.length > 0) {
            events.forEach(function (event, i) {
                var dateStr = moment(event.Date, apiReturnDateFormat);
                dateStr = dateStr.format('LL');
                var hoverText = event["Hover" + cultureDataAppend] == null ? "" : event["Hover" + cultureDataAppend];
                var longText = event["Text" + cultureDataAppend] == null ? "" : event["Text" + cultureDataAppend];
                var text = longText.length > 0 ? longText : hoverText;
                if ((/milestone/gi).test(event.Type)) {
                    milestones += "<li>" + dateStr + "<br>" + text + "</li>";
                    milstoneCount++
                } else {
                    training += "<li>" + dateStr + "<br>" + text + "</li>";
                    trainingCount++;
                }
            });
        }
        milestones += "</ul>";
        training += "</ul>";
        milestones = milstoneCount == 0 ? "" : milestones;
        training = trainingCount == 0 ? "" : training;

        // Create overall content 
        content.push(description, timespan, milestones, training);
        for (var i = 0; i < content.length; i++) {
            if (content[i].length == 0) continue;
            content[i] = "<h3>" + heading[i] + "</h3>" + content[i];
        }
        return content.filter(function (n) { return n != "" }).join("");
    }

    return {
        draw: function (data) {
            var start = Date.now();
            _render(data);
            _categorize();
            var later = Date.now();
            console.log("Took " + (later - start) + "ms to draw data");
        }
    }
})();


var dataManager = (function() {
    var _protectedInitiatives = null;
    var _filteredInitiatives = null;
    var _timelines = [];
    var _regions = null;
    var _branches = null;
    var _initiativesURL = "/data/accessibility";
    var _regionsURL = "/data/regions";
    var _branchesURL = "/data/branches";

    var _initialize = function(callback) {
        callPostAPI(_initiativesURL, function(data) {
            _protectedInitiatives = JSON.parse(data);
            _protectedInitiatives.forEach(function(elem, idx, arr) {
                _timelines.push(elem['Name' + cultureDataAppend]);
            });
            _filteredInitiatives = JSON.parse(data);
        }, culture).then(
        callPostAPI(_regionsURL, function(data) {
            data = JSON.parse(data);
            data = _sortByName(data);
            var nca;
            data = data.filter(function (object) {
                if (object.NameShort == "nca")
                    nca = object;
                return object.NameShort != "nca"
            });
            data.unshift(nca);
            _regions = data;
        })).then(
        callPostAPI(_branchesURL, function(data) {
            data = JSON.parse(data);
            _branches = _sortByName(data);
        })).then(callback);
    };

    var _filterTimeline = function() {
        var timelineKey = controller.timelineKey();
        if (timelineKey !== 'All') {
            _filteredInitiatives = _filteredInitiatives.filter(function(elem, idx, arr) {
                return elem['Name' + cultureDataAppend] == timelineKey;
            });
        }
    }

    var _determineWeight = function() {
        _filteredInitiatives.forEach(function(block) {
            if (controller.regionKey() != '0' && controller.branchKey() != '0') {
                block.Data.forEach(function(elem, idx, arr) {
                    if (_keyExists(elem, 'Impacts', controller.controlKey())) {
                        elem.Weight = _getValueByKey(elem, 'Impacts', controller.controlKey());
                    } else {
                        elem.Weight = 0;
                    }
                })
            }
        });
    }

    var _filterEvents = function() {
        _filteredInitiatives.forEach(function(block) {
            if (controller.regionKey() != '0' && controller.branchKey() != '0') {
                block.Data.forEach(function(initiative, idx, arr) {
                    initiative.Events = initiative.Events.filter(function(elem, idx, arr) {
                        return _keyExists(elem, 'Control', controller.controlKey());
                    })
                });
            }
        });
    }

    var _sortOrder = function() {
        _filteredInitiatives.forEach(function(block) {
            console.log(block.Data);
            block.Data.sort(function(a, b) {
                return (sortComparator(b.Weight, a.Weight) ||
                        sortComparator(a['Name' + cultureDataAppend], b['Name' + cultureDataAppend]));
            });
        });
    }

    var _filterRegionBranch = function() {
        _determineWeight();
        _filterEvents();
        _sortOrder();
    }

    var _filterInitiatives = function() {
        _filteredInitiatives = _jsonDeepCopy(_protectedInitiatives);
        _filterTimeline();
        _filterRegionBranch();
        gui.draw(_filteredInitiatives);
    }

    var _jsonDeepCopy = function(jsonToCopy) {
        return JSON.parse(JSON.stringify(jsonToCopy));
    }

    var _keyExists = function(object, objectAccessor, key) {
        return key in object[objectAccessor];
    }

    var _getValueByKey = function(object, objectAccessor, key) {
        return object[objectAccessor][key];
    }

    var _sortByWeight = function(data) {
        data.forEach
    }

    var _sortByName = function(data) {
        return data.sort(function(a, b) {
            return sortComparator(a['Name' + cultureDataAppend], b['Name' + cultureDataAppend]);
        });
    }

    var _getProtectedInitiatives = function() { return _protectedInitiatives };
    var _getFilteredInitiatives = function() { return _filteredInitiatives };
    var _getTimelines = function() { return _timelines };
    var _getRegions = function() { return _regions };
    var _getBranches = function() { return _branches };

    return {
        filterDataset: _filterInitiatives,
        getProtectedInitiatives: _getProtectedInitiatives,
        getFilteredInitiatives: _getFilteredInitiatives,
        getTimelines: _getTimelines,
        getRegions: _getRegions,
        getBranches: _getBranches,
        initialize: _initialize
    }
})();

var controller = (function(dataManager) {
    var _timeline = '#select-timeline',
        _timelineKey = document.querySelector(_timeline).value;
    var _region = '#select-region',
        _regionKey = document.querySelector(_region).value;
    var _branch = '#select-branch',
        _branchKey = document.querySelector(_branch).value;
    var _controlKey;

    var _addOption = function(selector, optionObject) {
        var select = document.querySelector(selector);
        var option = document.createElement('option');
        option.text = optionObject.text;
        option.value = optionObject.value;
        select.add(option);
    }

    var _addTimelineOptions = function() {
        dataManager.getTimelines().forEach(function(elem, idx, arr) {
            _addOption(_timeline, {text: elem, value: elem});
        });
    }

    var _addBranchOptions = function() {
        dataManager.getBranches().forEach(function(elem, idx, arr) {
            _addOption(_branch, {text: elem['Name' + cultureDataAppend], value: elem['ID']});
        });
    }
    
    var _addRegionOptions = function() {
        dataManager.getRegions().forEach(function(elem, idx, arr) {
            _addOption(_region, {text: elem['Name' + cultureDataAppend], value: elem['ID']});
        });
    }

    var _addEventListener = function(selector, eventType, callback) {
        var elements = document.querySelectorAll(selector);
        [].forEach.call(elements, function(elem) {
            elem.addEventListener(eventType, callback);
        });
    }

    var _lockRegionBranch = function(lock) {
        var region = document.querySelector(_region),
            branch = document.querySelector(_branch);
        if (lock) {
            region.disabled = true;
            branch.disabled = true;
            region.options.item(0).selected = true;
            branch.options.item(0).selected = true;
            _regionKey = 0;
            _branchKey = 0;
        } else {
            region.disabled = false;
            branch.disabled = false;
        }
    }

    var _resetPage = function() {
        _timelineKey = this.value;
        if (_timelineKey == 0) {
            _lockRegionBranch(true);
        } else {
            _lockRegionBranch(false);
            dataManager.filterDataset();
        }
    }

    var _applyFilter = function() {
        _regionKey = document.querySelector(_region).value;
        _branchKey = document.querySelector(_branch).value;
        dataManager.filterDataset();
    }

    var _registerEvents = function() {
        _addEventListener(_timeline, 'change', _resetPage);
        _addEventListener(_region, 'change', _applyFilter);
        _addEventListener(_branch, 'change', _applyFilter);
    }

    var _populateControllers = function() {
        _addTimelineOptions();
        _addRegionOptions();
        _addBranchOptions();
        _registerEvents();
    }

    var _getControlKey = function() {
        _controlKey = _regionKey + ',' + _branchKey;
        return _controlKey;
    }

    var _getRegionKey = function() { return _regionKey }

    var _getBranchKey = function() { return _branchKey }

    var _getControllerState = function() {
        return 0;
    }

    var _getTimelineKey = function() {
        return _timelineKey;
    }

    return {
        generate: _populateControllers,
        controlKey: _getControlKey,
        regionKey: _getRegionKey,
        branchKey: _getBranchKey,
        controlState: _getControllerState,
        timelineKey: _getTimelineKey
    }
})(dataManager);

$(window).on('load', function() {
    dataManager.initialize(controller.generate);
    // Delegated Event listener to bind events to dynamic HTML contents
    $("#timeline-accordions").on("click", "a.accordion-section-title", function () {
        toggleAccordion($(this));
    });
})
</script>