@{
    ViewBag.Title = "Accessibility";
}
<link href="@Url.Content("~/Content/accessibility.css")" rel="stylesheet" type="text/css" />

<h2>Accessibility</h2>

<h1 id="wb-cont">@Resources.NationalTransformationTimelineTool</h1>


@Html.Raw(Resources.TimelineIntroduction)

<div id="controller_container">
    <div id="timeline_container">
        <label for="timeline_controller">@Resources.Timeline:</label>
        <select id="timeline_controller">
            <option id="View All">View All</option>
            <option value="BP2020">Blueprint 2020</option>
            <option value="TransformationTimeline">Transformation Timeline</option>
        </select>
    </div>
    <div id="region_container">
        <label for="region_controller">@Resources.SelectYourArea :</label>
        <select id="region_controller"><option id="0"></option></select>
    </div>
    <div id="branch_container">
        <label for="branch_controller">@Resources.SelectYourBranch :</label>
        <select disabled id="branch_controller"><option id="0"></option></select>
    </div>
</div>

<div id="text_timeline_container ">
    <div id="timeline_accordion" class="accordion">

    </div>
</div>
@section Scripts {
    <script type="text/javascript" src="~/Scripts/jquery-ui-datepicker.min.js"></script>
}

<script>
    var local = true;

    // data variables
    var initiatives;
    var regionKey = 0;
    var branchKey = 0;
    var regionName;
    var branchName;
    var currentCulture = window.location.href.indexOf("fr") > -1 ? "fr" : "en";
    var cultureDateformat = currentCulture == "en" ? "dd-M-yy" : "yy-mm-dd";

    // data URLs
    var initiativesURL = currentCulture == "en" ?
        local ? "/data/initiatives-eng" : "/initiatives/data?lang=eng" :
        local ? "/data/initiatives-fra" : "/initiatives/data?lang=fra";
    var regionsURL = local ? "/data/regions" : "/regions/data?lang=eng";
    var branchesURL = local ? "/data/branches": "/Directions-Generales-Branches/data?lang=eng";

    // HTML variables
    var regionController;
    var branchController;

    // Lock JS using Deferred object
    var lock;

    function getJSON(url, successCallback) {
        $.ajax({
            type: "GET",
            url: url,
            cache: true,
            success: function (data) {
                successCallback(JSON.stringify(data));
                initCenterSpan();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(JSON.stringify(jqXHR) + ", " + textStatus);
            }
        });
    }

    function populateControllers() {
        regionController = $("#region_controller");
        branchController = $("#branch_controller");
        if (regionController.length == 0 || branchController.length == 0)
            throw { name: "NoDOM", message: "Controllers are missing" };

        getJSON(regionsURL, function (data) {
            regions = JSON.parse(data);
            var propertyCulture = currentCulture == "en" ? "NameE" : "NameF";
            regions = regions.sort(function (a, b) {
                return sortComparator(a[propertyCulture], b[propertyCulture]);
            });
            var nca;
            regions = regions.filter(function (object) {
                if (object.NameShort == "nca")
                    nca = object;
                return object.NameShort != "nca"
            });
            regions.unshift(nca);
            for (var k in regions) {
                regionName = regions[k][propertyCulture];
                var option = "<option id=" + regions[k].ID + " value=" + regions[k].ID + ">" + regionName + "</option>";
                regionController.append(option);
            }
        });

        getJSON(branchesURL, function (data) {
            branches = JSON.parse(data);
            var propertyCulture = currentCulture == "en" ? "NameE" : "NameF";
            branches = branches.sort(function (a, b) {
                return sortComparator(a[propertyCulture], b[propertyCulture]);
            });
            for (var k in branches) {
                branchName = branches[k][propertyCulture];
                var option = "<option id=" + branches[k].ID + ">" + branchName + "</option>";
                branchController.append(option);
            }
        });
    }

    function getInitiatives() {
        lock = new $.Deferred();
        getJSON(initiativesURL, function (data) {
            initiatives = JSON.parse(data);
            dataset.setupInitiatives(data);
            lock.resolve();
        });
        return lock;
    }

    function getControlKey(key1, key2) {
        return (key1 + "," + key2);
    }

    function toggleAccordion(elem) {
        elem.toggleClass('toggle');
        var contentID = elem.attr("href");
        $(contentID).slideToggle();
    }

    // Initialize center-span class (calculate children width and set span width)
    function initCenterSpan() {
        var elems = $(".center-span");
        if (elems.length > 0) {
            elems.each(function () {
                var children = $(this).children();
                if (children.length > 0) {
                    var childrenWidth = 0;
                    children.each(function () {
                        childrenWidth += $(this).outerWidth(true);
                    });
                }
                $(this).outerWidth(Math.ceil(childrenWidth / 100) * 100);
            });
        }
    }

    var sortComparator = function (a, b) {
        if (a > b) return 1;
        if (a < b) return -1;
        return 0;
    };

    var dataset = (function () {
        var _initiatives;
        var _sortedInitiatives;
        var _timelineFilterValue;

        var _impactWeight = function (level) {
            switch (level) {
                case 0: return 10; // None
                case 1: return 20; // Low
                case 2: return 30; // Medium
                case 3: return 40; // High
                case 4: return 0; // BP2020
                default: return -1;
            }
        }

        var _getResourceByWeight = function (weight) {
            switch (weight) {
                case 10: return '@Resources.TimelineNoImpact';
                case 20: return '@Resources.TimelineLowImpact';
                case 30: return '@Resources.TimelineMediumImpact';
                case 40: return '@Resources.TimelineHighImpact';
                case 0: return '@Resources.BP2020';
            }
        }

        var _prepareDataset = function () {
            _timelineFilterValue = 'View All';
            console.log(_initiatives);
            _initiatives.sort(function (a, b) {
                return (sortComparator(b.Timeline, a.Timeline) || sortComparator(a.Name, b.Name));
            });
            _initiatives.forEach(function (initiative, i) {
                var tempControlObject;
                initiative.Impacts.forEach(function (impact, j) {
                    tempControlObject = _mergeObjects(tempControlObject, _createControlObject(impact, 'impact'));
                });
                initiative.control = tempControlObject;
                delete initiative.Impacts;

                initiative.Events.forEach(function (event, j) {
                    initiative.Events[j].control = _createControlObject(event, 'event');
                    delete initiative.Events[j].Regions;
                    delete initiative.Events[j].Branches;
                });
            });
            _sortedInitiatives = JSON.parse(JSON.stringify(_initiatives));
        }

        var _createControlObject = function (object, type) {
            /*  Control Object has key:value structure
             *  key => [region,branch]
             *  value => [impactWeight or -1]
             */
            var control = {};
            object.Regions.forEach(function (region, i) {
                object.Branches.forEach(function (branch, i) {
                    var hashKey = region + "," + branch;
                    if (type === 'impact') {
                        control[hashKey] = _impactWeight(object.Level);
                    } else {
                        control[hashKey] = -1;
                    }
                });
            });
            return control;
        }

        var _controlExists = function (object) {
            var controlKey = getControlKey(regionKey, branchKey);
            return controlKey in object.control;
        }

        var _timelineFilter = function (object) {
            if (_timelineFilterValue.indexOf("View All") > -1)
                return true;
            return object.Timeline == _timelineFilterValue;
        }

        var _sortAndFilterInitiatives = function () {
            var controlKey = getControlKey(regionKey, branchKey);
            // Deep copy initial dataset before sorting and filtering
            _sortedInitiatives = JSON.parse(JSON.stringify(_initiatives));
            _sortedInitiatives.forEach(function (initiative, i) {
                if (_sortedInitiatives[i].control[controlKey] !== undefined)
                    _sortedInitiatives[i].Weight = _sortedInitiatives[i].control[controlKey];
                else {
                    if (regionKey > 0 && branchKey > 0)
                        _sortedInitiatives[i].Weight = _impactWeight(0);
                }
                _sortedInitiatives[i].Events = initiative.Events.filter(_controlExists);
            });

            // Sort by timeline, weight then name
            _sortedInitiatives.sort(function (a, b) {
                return (sortComparator(b.Timeline, a.Timeline) ||
                        sortComparator(b.Weight, a.Weight) ||
                        sortComparator(a.Name, b.Name));
            });

            // Filter by timeline selected
            _sortedInitiatives = _sortedInitiatives.filter(_timelineFilter);
        }

        var _resetSortedInitiatives = function () {
            _sortedInitiatives = null;
        }

        var _mergeObjects = function (obj1, obj2) {
            var temp = {};
            for (var attrname in obj1) { temp[attrname] = obj1[attrname]; }
            for (var attrname in obj2) { temp[attrname] = obj2[attrname]; }
            return temp;
        }

        var _getInitiatives = function () {
            return _sortedInitiatives;
        }

        var _getTimelineFilter = function () {
            return _timelineFilterValue;
        }

        var _setTimelineFilter = function (optionValue) {
            if (typeof optionValue === 'string')
                _timelineFilterValue = optionValue;
            else
                _timelineFilterValue = 'View All';
        }

        return {
            setupInitiatives: function (data) {
                var start = Date.now();
                if (typeof data !== 'object') data = JSON.parse(data);
                _initiatives = data;
                _prepareDataset();
                var later = Date.now();
                console.log("Took " + (later - start) + "ms to process data");
            },
            getInitiatives: _getInitiatives,
            sort: _sortAndFilterInitiatives,
            resetSort: _resetSortedInitiatives,
            getImpactSentence: _getResourceByWeight,
            setTimelineFilter: _setTimelineFilter,
            getTimelineFilter: _getTimelineFilter
        }
    })();

    var gui = (function () {
        var _accordionCount = 0;

        var addAccordion = function (title, content, timeline, weight) {
            weight = weight !== undefined ? weight : -1;
            _accordionCount++;
            var accordion = "<div class='accordion-section' data-timeline = " + timeline + " data-weight=" + weight + ">";
            accordion += "<a class='accordion-section-title' href='#accordion-" + _accordionCount + "'><span></span>&nbsp;" + title + "</a>";
            accordion += "<div id='accordion-" + _accordionCount + "' class='accordion-section-content closed'>";
            accordion += content;
            accordion += "</div></div>";
            $("#timeline_accordion").append(accordion);
        }

        var _render = function (initiatives) {
            $("#timeline_accordion").empty();
            initiatives.forEach(function (initiative, i) {
                var content = _createContent(initiative);
                console.log();
                if (initiative.Weight === undefined) {
                    addAccordion(initiative.Name, content, initiative.Timeline);
                } else {
                    addAccordion(initiative.Name, content, initiative.Timeline, initiative.Weight);
                }
            });
        }

        var _categorize = function () {
            var initialScreen;
            if (dataset.getTimelineFilter().indexOf('View All') > -1 && (regionKey == 0 || branchKey == 0))
                initialScreen = true;
            else
                initialScreen = false;
            var $accordions = $(".accordion-section");
            var previousTimeline;
            var previousWeight;
            $.each($accordions, function () {
                var timeline = $(this).data('timeline');
                var weight = $(this).data('weight');
                if (weight == -1) {
                    if (!initialScreen) {
                        return false; // must be an error, exit each loop 
                    } else {
                        if (timeline == previousTimeline)
                            return true; // skip to next iteration
                        $("<h4>" + timeline + "</h4>").insertBefore($(this));
                        previousTimeline = timeline;
                    }
                } else {
                    if (weight == previousWeight)
                        return true; // skip to next iteration
                    $("<h4>" + dataset.getImpactSentence(weight) + "</h4>").insertBefore($(this));
                    previousWeight = weight;
                }
            });
        }

        var _getMonthNumber = function (dateString) {
            var month = dateString.split('-')[1];
            if (isNaN(parseInt(month))) {
                switch (month) {
                    case 'Jan': return 1; case 'Feb': return 2; case 'Mar': return 3;
                    case 'Apr': return 4; case 'May': return 5; case 'Jun': return 6;
                    case 'Jul': return 7; case 'Aug': return 8; case 'Sep': return 9;
                    case 'Oct': return 10; case 'Nov': return 11; case 'Dec': return 12;
                    default: return 0;
                }
            } else {
                return parseInt(month);
            }
        }

        var _getYearNumber = function (dateString) {
            var yearIndex = currentCulture == 'en' ? 2 : 0;
            return dateString.split('-')[yearIndex];
        }

        var _getQuarter = function (month, year) {
            if (month >= 1 && month <= 3) return 'Q4 ' + year;
            if (month >= 4 && month <= 6) return 'Q1 ' + year;
            if (month >= 7 && month <= 9) return 'Q2 ' + year;
            if (month >= 10 && month <= 12) return 'Q3 ' + year;
            return 'error';
        }

        var _createContent = function (initiative) {
            var content = [];
            var heading = ["Description", "Timespan", "Key milestones", "Training"];

            // Create description
            var description = "<p>" + initiative["Description"] + "</p>";

            // Create timespan
            var startDate = $.datepicker.formatDate(cultureDateformat, new Date(initiative["StartDate"]));
            startDate = _getQuarter(_getMonthNumber(startDate), _getYearNumber(startDate));
            var endDate = $.datepicker.formatDate(cultureDateformat, new Date(initiative["EndDate"]));
            endDate = _getQuarter(_getMonthNumber(endDate), _getYearNumber(endDate))
            var timespan = startDate + " ~ " + endDate;
            timespan = "<p>" + timespan + "</p>";

            // Create milestones & training
            var milestones = "<ul>";
            var training = "<ul>";
            var events = initiative["Events"];
            var milstoneCount = 0;
            var trainingCount = 0;
            if (events.length > 0) {
                events.forEach(function (event, i) {
                    var dateStr = $.datepicker.formatDate(cultureDateformat, new Date(event["Date"]));
                    var hoverText = event["Hover"] == null ? "" : event["Hover"];
                    var longText = event["Text"] == null ? "" : event["Text"];
                    if ((/milestone/gi).test(event["Type"])) {
                        milestones += "<li>" + dateStr + "<br>" + hoverText + longText + "</li>";
                        milstoneCount++
                    } else {
                        training += "<li>" + dateStr + "<br>" + hoverText + longText + "</li>";
                        trainingCount++;
                    }
                });
            }
            milestones += "</ul>";
            training += "</ul>";
            milestones = milstoneCount == 0 ? "" : milestones;
            training = trainingCount == 0 ? "" : training;

            // Create overall content 
            content.push(description, timespan, milestones, training);
            for (var i = 0; i < content.length; i++) {
                if (content[i].length == 0) continue;
                content[i] = "<h3>" + heading[i] + "</h3>" + content[i];
            }
            return content.filter(function (n) { return n != "" }).join("");
        }

        return {
            draw: function (data) {
                var start = Date.now();
                _render(data);
                _categorize();
                var later = Date.now();
                console.log("Took " + (later - start) + "ms to draw data");
            }
        }
    })();

    $(window).on("load", function () {
        function main() {
            try {
                // Initial setup
                $.datepicker.setDefaults($.datepicker.regional[currentCulture]);
                populateControllers();
                getInitiatives();
                $.when(lock).done(function () {
                    gui.draw(dataset.getInitiatives());
                });

                // Event listeners
                $("#branch_controller, #region_controller, #timeline_controller").on("change", function () {
                    
                    var regionSelected = $("#region_controller option:selected").val() > 0;
                    $("#branch_controller").prop("disabled", !regionSelected);
                    if (!regionSelected) $("#branch_controller option:eq(0)").prop("selected", true);

                    var selected = $(this).find("option:selected").attr("id");
                    regionKey = $(this).attr("id") == "region_controller" ? selected : regionKey;
                    branchKey = $(this).attr("id") == "branch_controller" ? selected : branchKey;

                    if (regionKey == 0 || branchKey == 0) {
                        dataset.resetSort();
                    }
                    dataset.setTimelineFilter($("#timeline_controller option:selected").val());
                    dataset.sort();
                    gui.draw(dataset.getInitiatives());
                });

                // Delegated Event listener to bind events to dynamic HTML contents
                $("#timeline_accordion").on("click", "a.accordion-section-title", function () {
                    toggleAccordion($(this));
                });
            } catch (e) {
                console.log(e.name + ": " + e.message);
            }
        }
        main();
    });
</script>